from asyncio import run

from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramForbiddenError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio import Redis

from bot.utils.registry import registry
from modules.database.methods.users import get_all_users
from modules.envs.settings import settings
from modules.logs import logger
from modules.robokassa_api.async_api import AsyncPaymentProcessor


async def startup(dispatcher: Dispatcher, bot: Bot, redis: Redis):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    keys = await redis.keys("*")
    if keys:
        print(f"üîë –ö–ª—é—á–∏ –≤ Redis: {keys}")
        for key in keys:
            value = await redis.get(key)
            print(f"{key}: {value}")
    else:
        print("üìÇ Redis –ø—É—Å—Ç")

    logger.info("Bot started")
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(settings.bot.admin_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except TelegramForbiddenError:
        logger.error(
            "Failed to send startup message to admin. Admin might have blocked the bot."
        )


class CustomKeyBuilder:
    def build(self, key, data_type):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á FSM, –≤–∫–ª—é—á–∞—é—â–∏–π –∏–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
        """
        chat_id, user_id = key.chat_id, key.user_id
        state = key.state if hasattr(key, "state") and key.state else "no_state"
        return f"fsm:{chat_id}:{user_id}:{data_type}:{state}"


async def start(bot: Bot, dp: Dispatcher, redis: Redis):
    try:
        # –ü—Ä–∏–º–µ—Ä API —Ä–æ–±–æ–∫–∞—Å—Å—ã
        payment_processor = AsyncPaymentProcessor(
            merchant_login=settings.robokassa.merchant_login,
            merchant_password_1=settings.robokassa.merchant_password_1,
            merchant_password_2=settings.robokassa.merchant_password_2,
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º `startup` —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º
        async def startup_wrapper(dispatcher: Dispatcher):
            await startup(dispatcher, bot, redis)

        dp.startup.register(startup_wrapper)

        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await dp.start_polling(bot, payment_processor=payment_processor, redis=redis)
    finally:
        await bot.session.close()
        logger.info("Bot stopped")
        await redis.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∏ FSM Storage
    redis = Redis(host="redis", port=6379)
    storage = RedisStorage(redis, key_builder=CustomKeyBuilder())
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
    registry(dp)

    run(start(settings.bot.bot, dp, redis))


if __name__ == "__main__":
    main()
